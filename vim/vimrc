" vim: fdm=marker
" vim: foldlevel=0

"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" copyright: (c) 2015 Gabriel Lima
"
" license: MIT
"

" CONTENTS:

" 1. Plugin Management --------------------------------------------------- {{{1

call plug#begin('~/.vim/plugged')

Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ewilazarus/preto'
Plug 'ewilazarus/vim-snnm'
Plug 'justinmk/vim-gtfo'
Plug 'kien/ctrlp.vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'kovisoft/paredit', { 'for': 'clojure' }
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'raimondi/delimitmate'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'sirver/ultisnips' | Plug 'honza/vim-snippets'
Plug 'sjl/gundo.vim'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'valloric/youcompleteme', { 'do': './install.py --clang-completer' }

call plug#end()


" 2. Leader Key ---------------------------------------------------------- {{{1

let mapleader = "\<SPACE>"


" 3. Editor Preferences -------------------------------------------------- {{{1

set encoding=utf-8
set nowrap
set backspace=indent,eol,start
set nobackup
set noswapfile
set foldlevel=99
set clipboard=unnamedplus
set mouse=a
set scrolloff=5
set spelllang=en_us
set visualbell

" 3.1. Tab Preferences --------------------------------------------------- {{{2

set tabstop=4
set smarttab
set shiftwidth=4
set autoindent
set shiftround
set copyindent
set completeopt=menu

" 3.2. Search Preferences ------------------------------------------------ {{{2

set showmatch
set ignorecase
set smartcase
set hlsearch
set incsearch

" Turns hlsearch on and keep search matches in the middle of the screen
nnoremap n :set hlsearch<CR>nzzzv
nnoremap N :set hlsearch<CR>Nzzzv

" Don't move on *
nnoremap * :set hlsearch<CR>*<C-O>


" 4. Appearance ---------------------------------------------------------- {{{1

if ($COLORTERM == 'gnome-terminal')
	set t_Co=256
endif

syntax on
colorscheme preto

" Statusline
set laststatus=2

" Show line numbers
set number
set relativenumber

" Show column #80
set colorcolumn=80

" Display '.' for trailing whitespace
set listchars=tab:→\ ,trail:·,eol:¬


" 5. Mappings ------------------------------------------------------------ {{{1

" 5.1. Normal Mode ------------------------------------------------------- {{{2

" Window Resizing
nnoremap <silent>+ :vertical resize +5<CR>
nnoremap <silent>_ :vertical resize -5<CR>

" Move through wrapped lines
nnoremap j gj
nnoremap k gk

" REdo
nnoremap U <C-R>

" Maps '0' to BOL and '-' to EOL
nnoremap 0 ^
nnoremap - $

" Make Y behave like other capitals
nnoremap Y y$

" Make ctrl-d pageup, ctrl-s pagedown
nnoremap <C-D> <C-B>
nnoremap <C-S> <C-F>

" Save file
nnoremap <LEADER>w :w<CR>

" Save file (sudo)
nnoremap <LEADER><LEADER>w :w !sudo tee % >/dev/null<CR>

" Quick quit
nnoremap <LEADER>q :bd<CR>

" Force quit
nnoremap <LEADER><LEADER>q :q!<CR>

" Select last modified text
nnoremap gV `[v`]

" Quick search and replace
nnoremap / /\v
nnoremap ? ?\v
nnoremap € :%s//

" Documentation
nnoremap <F1> K

" Split line
nnoremap K i<CR><ESC>

" Make jumping more comfortable in ABNT2 keyboard
nnoremap ' `

" Redraw!
nnoremap <F5> :redraw!<CR>

" Increment number
nnoremap <C-C> <C-A>

" Better macro trigger
nnoremap Q @q

" Toggle Paste Mode
nnoremap cop :set paste!<CR>

" Toggle Rainbow Parenthesis
nnoremap coa :RainbowParenthesesToggle<CR>

" 'Fix' jump list
nnoremap <C-O> <C-I>
nnoremap <C-I> <C-O>

" 'Fix' change list
nnoremap g, g;
nnoremap g; g,

" Navigate buffers
nnoremap <silent>gb :bprev<CR>
nnoremap <silent>gB :bnext<CR>

nnoremap ® :call ToggleREPL()<CR>

" 5.2. Insert Mode ------------------------------------------------------- {{{2

" Make 'jk' and 'kj' leave insert mode
inoremap jk <ESC>
inoremap kj <ESC>

" Better pasting in insert mode
inoremap <C-V> <C-R>+

" Navigate in insert mode
inoremap <C-J> <DOWN>
inoremap <C-K> <UP>
inoremap <C-L> <RIGHT>

" 5.3. Visual Mode ------------------------------------------------------- {{{2

" Make 'space' leave visual mode
vnoremap <LEADER> <ESC>

" Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Maps '0' to BOL and '-' to EOL
vnoremap 0 ^
vnoremap - $

" Make ctrl-d pageup, ctrl-s pagedown
vnoremap <C-D> <C-B>
vnoremap <C-S> <C-F>

" Quick replace
vnoremap € :s/

" 5.4. Command Mode ------------------------------------------------------ {{{2

" Make 'jk' and 'kj' leave command mode
cnoremap jk <C-U><BS>
cnoremap kj <C-U><BS>

" Navigate history
cnoremap <C-J> <DOWN>
cnoremap <C-K> <UP>

" Tweak .vimrc
command! Vimrc :tabe $MYVIMRC


" 6. Autocommands -------------------------------------------------------- {{{1

" Remember last opened line
augroup RessurrectLine
	autocmd!
	autocmd BufReadPost *
				\ if line("'\"") > 0 && line("'\"") <= line("$") |
				\ exe "normal! g'\"" | 
				\ endif
augroup END

" Source .vimrc when save
augroup VimReload
	autocmd!
	autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END


" 7. Functions ----------------------------------------------------------- {{{1

" Toggle REPL pane
function! ToggleREPL()
	if !exists("b:repl")
		:VimuxPromptCommand
		let b:repl = 1
	else
		:VimuxCloseRunner
		unlet b:repl
	endif
endfunction

" Show syntax highlighting groups for word under cursor
nmap <LEADER>h :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" 8. Plugin Customization ------------------------------------------------ {{{1

" Airline
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

let g:airline_theme = 'distinguished'

" CtrlP
let g:ctrlp_map = '<C-F>'
"let g:ctrlp_cmd = 'CtrlPBuffer'

" DelimitMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" GUndo
nnoremap <C-U> :GundoToggle<CR>

" NERDTree
nnoremap <silent><C-N> :NERDTreeToggle<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger = '<C-X>'
let g:UltiSnipsJumpForwardTrigger = '<TAB>'
let g:UltiSnipsJumpBackwardTrigger = '<S-TAB>'

" Rainbow-Parentheses
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Snnm
let g:snnmapp = '/usr/local/bin/snnm'

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

" Tagbar
nnoremap <silent><C-G> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" YouCompleteMe		
let g:ycm_show_diagnostics_ui = 0		
let g:ycm_key_list_select_completion=['<C-J>', '<DOWN>']		
let g:ycm_key_list_previous_completion=['<C-K>', '<UP>']
