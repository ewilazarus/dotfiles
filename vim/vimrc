" vim: fdm=marker

"		 _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" copyright: (c) 2015-2016 Gabriel Lima
" license: MIT

" CONTENTS:

" 1. Plugins ------------------------------------------------------------- {{{1

" 1.1. List -------------------------------------------------------------- {{{2

call plug#begin('~/.vim/plugged')

" UI/Navigation
Plug 'flazz/vim-colorschemes'
Plug 'christoomey/vim-tmux-navigator'
Plug 'justinmk/vim-gtfo'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Buffer Navigation
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar'

" Miscelaneous
Plug 'kien/rainbow_parentheses.vim'
Plug 'mileszs/ack.vim'
Plug 'raimondi/delimitmate'
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'sirver/ultisnips'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'valloric/youcompleteme', { 'do': './install.py --clang-completer', 'frozen': 1 }
Plug 'takac/vim-hardtime'

" Language Specifics - Clojure
Plug 'guns/vim-sexp' | Plug
			\ 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Own Plugins
let g:plug_url_format = 'git@github.com:%s.git'
Plug 'ewilazarus/vim-snippets'
Plug 'ewilazarus/vim-snnm'
unlet g:plug_url_format

call plug#end()

" 1.2. Settings ---------------------------------------------------------- {{{2

" Airline
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" CtrlP
nnoremap go. :CtrlP<CR>
nnoremap gob :CtrlPBuffer<CR>
nnoremap goh :CtrlP /home/ewilazarus<CR>
nnoremap gow :CtrlP /home/ewilazarus/Workspace<CR>
nnoremap god :CtrlP /home/ewilazarus/Dropbox<CR>
nnoremap gou :CtrlP /home/ewilazarus/UniFB<CR>
nnoremap gos :CtrlP /home/ewilazarus/.vim/plugged/vim-snippets/UltiSnips<CR>
nnoremap go? :echo "[.] Current; [b] Buffers; [h] Home; [w] Workspace; [d] Dropbox; [u] UniFB; [s] Snippets"<CR>
let g:ctrlp_custom_ignore = {
			\ 'dir': '\v[\/]\.(git|hg|svn)$',
			\ 'file': '\v\.(exe|so|dll|pyc|pyo|jar|zip|rar)$'
			\ }

" DelimitMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" Hardtime
let g:hardtime_default_on = 1
let g:hardtime_timeout = 2000
let g:hardtime_showmsg = 1

" NERDTree
nnoremap <silent><C-N> :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeHijackNetrw = 1
let g:NERDTreeIgnore = [
			\ '\.pyc$',
			\ '\.pyo$',
			\ '\.jar$',
			\ '\.exe$',
			\ '\.dll$',
			\ '\.so$',
			\ '\.zip$',
			\ '\.rar$'
			\ ]

" Rainbow-Parentheses
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Snnm
let g:snnmapp = '/usr/local/bin/snnm'

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1

" Tagbar
nnoremap <silent><C-B> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" YouCompleteMe
let g:ycm_show_diagnostics_ui = 0
let g:ycm_use_ultisnips_completer = 0
let g:ycm_key_list_select_completion=['<C-J>', '<DOWN>']
let g:ycm_key_list_previous_completion=['<C-K>', '<UP>']


" 2. Editor Preferences -------------------------------------------------- {{{1

" LEADER KEY
let mapleader = "\<SPACE>"

set encoding=utf-8
set nowrap
set backspace=indent,eol,start
set nobackup
set noswapfile
set clipboard=unnamedplus
set mouse=a
set scrolloff=5
set spelllang=en_us
set visualbell
set modeline
set splitright

" 2.1. Tab Preferences --------------------------------------------------- {{{2

set tabstop=4
set smarttab
set shiftwidth=4
set autoindent
set shiftround
set copyindent
set completeopt=menu

" 2.2. Search Preferences ------------------------------------------------ {{{2

set showmatch
set ignorecase
set smartcase
set hlsearch
set incsearch

" Keep search matches in the middle of the screen
nnoremap n nzzzv
nnoremap N Nzzzv

" Don't move on *
nnoremap * *<C-O>


" 3. Appearance ---------------------------------------------------------- {{{1

if ($COLORTERM == 'gnome-terminal')
	set t_Co=256
endif

syntax on
colorscheme badwolf

" Statusline
set laststatus=2

" Show line numbers
set number
set relativenumber

" Show column #80
set colorcolumn=80

" Display '.' for trailing whitespace
set listchars=tab:→\ ,trail:·,eol:¬


" 4. Mappings ------------------------------------------------------------ {{{1

" 4.1. Normal Mode ------------------------------------------------------- {{{2

" Better way to get into command mode
nnoremap <CR> :

" Build/Test
nnoremap <F9> :Dispatch<CR>

" Window Resizing
nnoremap <silent>+ :vertical resize +5<CR>
nnoremap <silent>_ :vertical resize -5<CR>

" Move through wrapped lines
nnoremap j gj
nnoremap k gk

" REdo
nnoremap U <C-R>

" Maps '0' to BOL and '-' to EOL
nnoremap H ^
nnoremap L $

" Make Y behave like other capital letters
nnoremap Y y$

" Make ctrl-d pageup, ctrl-s pagedown
nnoremap <C-D> <C-B>
nnoremap <C-S> <C-F>

" Save file
nnoremap <LEADER>w :update<CR>

" Save file (sudo)
nnoremap <LEADER><LEADER>w :w !sudo tee % >/dev/null<CR>

" Quick quit
nnoremap <LEADER>q :bd<CR>

" Force quit
nnoremap <LEADER><LEADER>q :qa!<CR>

" Select last modified text
nnoremap gV `[v`]

" Local (File) Search
nnoremap / /\v
nnoremap ? ?\v

" Global (Directory) Search
nnoremap <LEADER>a :Ack ""<LEFT>

" Documentation
nnoremap <F1> K

" Split line
nnoremap K i<CR><ESC>

" Make jumping more comfortable in ABNT2 keyboard
nnoremap ' `
nnoremap ` '

" Redraw!
nnoremap <F5> :redraw!<CR>

" Increment number
nnoremap <C-C> <C-A>

" Quick macro trigger
nnoremap Q @q

" Toggle Paste Mode
nnoremap cop :set paste!<CR>

" Toggle Rainbow Parenthesis
nnoremap coa :RainbowParenthesesToggle<CR>

" 'Fix' jump list
nnoremap <C-O> <C-I>
nnoremap <C-I> <C-O>

" 'Fix' change list
nnoremap g, g;
nnoremap g; g,

" Navigate buffers
nnoremap <silent>gB :bprev<CR>
nnoremap <silent>gb :bnext<CR>

" Reindent whole file
nnoremap === gg=G
nnoremap =q= ggVGgq

" Open URL under cursor in browser (Make it compatible to gtfo e ctrlp)
nmap gox gx

" Evaluate current file (Clojure only)
nnoremap <LEADER>e :%Eval<CR>


" 4.2. Insert Mode ------------------------------------------------------- {{{2

" Make 'jk' and 'kj' leave insert mode
inoremap jk <ESC>
inoremap kj <ESC>

" Better pasting in insert mode
inoremap <C-V> <C-R>+

" Navigate in insert mode
inoremap <C-J> <DOWN>
inoremap <C-K> <UP>
inoremap <C-B> <LEFT>
inoremap <C-L> <RIGHT>

" 4.3. Visual Mode ------------------------------------------------------- {{{2

" Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Maps '0' to BOL and '-' to EOL
vnoremap H ^
vnoremap L $

" Make ctrl-d pageup, ctrl-s pagedown
vnoremap <C-D> <C-B>
vnoremap <C-S> <C-F>

" 4.4. Command Mode ------------------------------------------------------ {{{2

" Make 'jk' and 'kj' leave command mode
cnoremap jk <C-U><BS>
cnoremap kj <C-U><BS>

" Navigate history
cnoremap <C-J> <DOWN>
cnoremap <C-K> <UP>

" Add some nice search related shortcuts
cnoremap ¹ %
cnoremap ² s//
cnoremap ³ /g

" 5. Commands ------------------------------------------------------------ {{{1

" Tweak .vimrc
command! -nargs=0 Vimrc :tabe $MYVIMRC

" 'argdo' wrapper: substitute arglist with quickfix
" command! -nargs=0 -bar Qargs execute 'args' s:QuickfixFilenames()
command! -nargs=+ Argdo exe 'args' s:QuickfixFilenames() | argdo <args> | up


" 6. Autocommands -------------------------------------------------------- {{{1

" Remember last opened line
augroup RessurrectLine
	autocmd!
	autocmd BufReadPost *
				\ if line("'\"") > 0 && line("'\"") <= line("$") |
				\ exe "normal! g'\"" |
				\ endif
augroup END

" Source .vimrc when save
augroup VimReload
	autocmd!
	autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" Make default <CR> behavior for special cases
augroup DefaultCR
	autocmd!
	autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>
	autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
augroup END

" Make text editing more pleasant
augroup TextEditing
	autocmd!
	au FileType markdown,tex,rst setlocal textwidth=80 formatoptions+=ta
	au FileType markdown,tex,rst :normal ggVGgq
augroup END


" 7. Functions ----------------------------------------------------------- {{{1

" 'Fix' , and ;
function! s:InitConsistentRepeat(command)
	if a:command =~# '[FT]'
		noremap ; ,
		noremap , ;
	else
		silent! unmap ;
		silent! unmap ,
	endif
	return a:command
endfunc
noremap <expr> f <SID>InitConsistentRepeat('f')
noremap <expr> t <SID>InitConsistentRepeat('t')
noremap <expr> F <SID>InitConsistentRepeat('F')
noremap <expr> T <SID>InitConsistentRepeat('T')

" Build deduped quickfix file name list
function! s:QuickfixFilenames()
	let bufnrs = {}
	for item in getqflist()
		let bufnrs[item['bufnr']] = bufname(item['bufnr'])
	endfor
	return join(map(values(bufnrs), 'fnameescape(v:val)'))
endfunc


" 8. Custom Text Objects ------------------------------------------------- {{{1
"    (Many thanks to Conner McDaniel)

let s:items = ["<bar>", "\\", "/", ":", ".", "*", "_"]
for item in s:items
	exe "nnoremap yi".item." T".item."yt".item
	exe "nnoremap ya".item." F".item."yf".item
	exe "nnoremap ci".item." T".item."ct".item
	exe "nnoremap ca".item." F".item."cf".item
	exe "nnoremap di".item." T".item."dt".item
	exe "nnoremap da".item." F".item."df".item
	exe "nnoremap vi".item." T".item."vt".item
	exe "nnoremap va".item." F".item."vf".item
endfor
